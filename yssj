<div class="input-button-form">
  <mat-form-field class="full-width" appearance="outline">
    <mat-label>Other Benchmark/s BBG Code</mat-label>
    <mat-chip-list #chipList>
      <!-- Render chips dynamically -->
      <mat-chip 
        *ngFor="let chip of otherBenchmarkChips" 
        [removable]="true" 
        (removed)="removeChip(chip)">
        {{ chip }}
        <mat-icon matChipRemove>cancel</mat-icon>
      </mat-chip>

      <!-- Input field for new chips -->
      <input
        placeholder="+ Other Benchmark BBG Code"
        [formControl]="otherBenchmarkControl"
        [matChipInputFor]="chipList"
        [matChipInputSeparatorKeyCodes]="separatorKeyCodes"
        [matChipInputAddOnBlur]="true"
        (matChipInputTokenEnd)="addChip($event)"
      />
    </mat-chip-list>
  </mat-form-field>
</div>




import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';

@Component({
  selector: 'app-other-benchmark',
  templateUrl: './other-benchmark.component.html',
  styleUrls: ['./other-benchmark.component.scss'],
})
export class OtherBenchmarkComponent {
  otherBenchmarkControl = new FormControl('');
  separatorKeyCodes = [ENTER, COMMA]; // Separator keycodes for chip input
  otherBenchmarkChips: string[] = ['SPGLEP Index', 'SPGLGUP Index']; // Predefined chips

  // Mock data for aggregationIndexList (replace with your actual data)
  publication = {
    aggregationIndexList: [
      { aggregationTicker: 'AGGR_1234', isCoreBenchmark: false },
      { aggregationTicker: 'AGGR_5678', isCoreBenchmark: true },
    ],
  };

  // Add a chip
  addChip(event: any): void {
    const value = (event.value || '').trim();
    if (value) {
      this.otherBenchmarkChips.push(value);
    }
    // Clear the input
    if (event.input) {
      event.input.value = '';
    }
    this.otherBenchmarkControl.setValue('');
  }

  // Remove a chip
  removeChip(chip: string): void {
    if (chip.startsWith('AGGR_')) {
      const index = this.publication.aggregationIndexList.findIndex(
        (x) => x.aggregationTicker === chip && !x.isCoreBenchmark
      );
      if (index > -1) {
        this.publication.aggregationIndexList.splice(index, 1);
      }
    }

    const chipIndex = this.otherBenchmarkChips.indexOf(chip);
    if (chipIndex > -1) {
      this.otherBenchmarkChips.splice(chipIndex, 1);
    }
  }
}



.full-width {
  width: 100%;
}

mat-form-field {
  margin: 16px 0;
}

mat-chip {
  background-color: #e0f7fa;
  color: #00796b;
  margin-right: 8px;

  .mat-icon {
    color: #004d40;
  }

  &:hover {
    background-color: #b2ebf2;
  }
}

input {
  outline: none;
  border: none;
  padding: 8px 0;
}




mat-chip-list {
  height: auto;

  .mat-chip-list-wrapper {
    border-bottom: 2px solid transparent; // Default border
    transition: border-color 0.2s ease-in-out;
  }

  &.mat-focused .mat-chip-list-wrapper {
    border-bottom: 2px solid $bnp-green !important; // Match the focus style
  }

  input {
    outline: none;
    border: none;
    box-shadow: none;
    padding: 4px 0;
    font-size: 14px;
    width: 100%;
  }

  mat-chip {
    margin: 4px;
    background-color: #e0e0e0;
    color: #424242;

    .mat-icon {
      color: #757575;
    }

    &:hover {
      background-color: lighten(#e0e0e0, 10%);
    }
  }
}





mat-chip-list {
  height: auto; // Match the height behavior of tag-input

  .mat-chip-list-wrapper {
    border-bottom: 2px solid transparent; // Default border
    transition: border-color 0.2s ease-in-out; // Smooth focus transition
  }

  &.mat-focused .mat-chip-list-wrapper {
    border-bottom: 2px solid $bnp-green !important; // Add focus style
  }

  input {
    outline: none;
    border: none;
    box-shadow: none;
    padding: 4px 0;
    font-size: 14px;
    width: 100%; // Ensures proper alignment with the chips
  }

  mat-chip {
    margin: 4px;
    background-color: #e0f7fa;
    color: #00796b;

    .mat-icon {
      color: #004d40;
    }

    &:hover {
      background-color: lighten(#e0f7fa, 10%);
    }
  }
}




.full-width {
  width: 100%;
}

.custom-chip-list {
  mat-form-field {
    margin: 16px 0;
    height: auto;

    .mat-chip-list-wrapper {
      border: 1px solid #d9d9d9; /* Default border */
      border-radius: 4px;
      padding: 4px;
      transition: border-color 0.2s ease-in-out;

      &:focus-within {
        border: 2px solid #43a047; /* Green border when focused */
      }
    }

    input {
      font-size: 14px;
      padding: 8px 0;
    }

    mat-chip {
      margin: 4px;
      background-color: #e0f7fa;
      color: #00796b;
      font-size: 14px;

      .mat-icon {
        color: #004d40;
      }

      &:hover {
        background-color: lighten(#e0f7fa, 10%);
      }
    }
  }
}




<div class="input-button-form">
  <mat-form-field class="full-width custom-chip-list" appearance="outline">
    <mat-label>Other Benchmark/s BBG Code</mat-label>
    <mat-chip-list #chipList>
      <!-- Dynamically render chips -->
      <mat-chip 
        *ngFor="let chip of otherBenchmarkChips" 
        [removable]="true" 
        (removed)="removeChip(chip)">
        {{ chip }}
        <mat-icon matChipRemove>cancel</mat-icon>
      </mat-chip>

      <!-- Input for new chips -->
      <input
        placeholder="Other Benchmark/s BBG Code"
        [formControl]="otherBenchmarkControl"
        [matChipInputFor]="chipList"
        [matChipInputSeparatorKeyCodes]="separatorKeyCodes"
        [matChipInputAddOnBlur]="true"
        (matChipInputTokenEnd)="addChip($event)"
      />
    </mat-chip-list>
  </mat-form-field>
</div>




::ng-deep .mat-chip-list-wrapper {
  border: 1px solid #d9d9d9; /* Default border color */
  border-radius: 4px; /* Rounded corners */
  padding: 4px; /* Padding inside the chip list */
  transition: border-color 0.2s ease-in-out; /* Smooth border transition on focus */
}

::ng-deep .mat-chip-list-wrapper:focus-within {
  border: 2px solid #43a047; /* Green border when focused */
}

::ng-deep mat-chip {
  margin: 4px; /* Space between chips */
  background-color: #e0f7fa; /* Light cyan background for chips */
  color: #00796b; /* Text color for chips */
  font-size: 14px; /* Font size for chip content */
  border-radius: 16px; /* Rounded chip style */

  .mat-icon {
    color: #004d40; /* Icon color */
  }

  &:hover {
    background-color: lighten(#e0f7fa, 10%); /* Slightly lighter background on hover */
  }
}

::ng-deep input {
  font-size: 14px; /* Match font size with chips */
  padding: 8px 0; /* Consistent padding */
  border: none; /* Remove input border */
  outline: none; /* Remove input focus outline */
}

::ng-deep .mat-chip {
  display: flex;
  align-items: center; /* Align text and icon vertically */
}

::ng-deep .mat-chip-remove {
  cursor: pointer; /* Change cursor to pointer for remove icon */
}

::ng-deep .mat-form-field {
  width: 100%; /* Make the field take full width */
  margin: 16px 0; /* Add vertical spacing */
}

::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {
  border-color: #d9d9d9; /* Default border color for outline */
}

::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline {
  border-color: #43a047; /* Green border when focused */
}

::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline-thick {
  border-width: 2px; /* Thicker border for focused state */
}


<div class="input-button-form">
  <mat-form-field class="full-width custom-chip-list" appearance="outline">
    <mat-label>Other Benchmark/s BBG Code</mat-label>
    <mat-chip-list #chipList>
      <!-- Render chips -->
      <mat-chip 
        *ngFor="let chip of otherBenchmarkChips" 
        [removable]="true" 
        (removed)="removeChip(chip)">
        {{ chip }} <!-- Show only bbgCode -->
        <mat-icon matChipRemove>cancel</mat-icon>
      </mat-chip>

      <!-- Input for autocomplete -->
      <input
        placeholder="Other Benchmark/s BBG Code"
        [formControl]="otherBenchmarkControl"
        [matChipInputFor]="chipList"
        [matChipInputSeparatorKeyCodes]="separatorKeyCodes"
        [matChipInputAddOnBlur]="true"
        [matAutocomplete]="auto" <!-- Link to autocomplete -->
      />
    </mat-chip-list>

    <!-- Autocomplete dropdown -->
    <mat-autocomplete #auto="matAutocomplete" (optionSelected)="addChip($event.option.value)">
      <mat-option *ngFor="let option of filteredOtherBenchmarkOptions | async" [value]="option">
        {{ option.bbgCode }} <!-- Show only bbgCode in dropdown -->
      </mat-option>
    </mat-autocomplete>
  </mat-form-field>
</div>



import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable, of } from 'rxjs';
import { debounceTime, switchMap, startWith, catchError, map } from 'rxjs/operators';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent {
  otherBenchmarkControl = new FormControl();
  otherBenchmarkChips: string[] = [];
  separatorKeyCodes: number[] = [13, 188]; // Enter and comma key codes
  filteredOtherBenchmarkOptions: Observable<AutoCompleteOptions[]>;

  constructor(private publicationsService: PublicationsService) {
    this.filteredOtherBenchmarkOptions = this.otherBenchmarkControl.valueChanges.pipe(
      startWith(''),
      debounceTime(300), 
      switchMap(value => value && value.length >= 3 ? this.fetchOptions(value) : of([])) 
    );
  }

  fetchOptions(value: string): Observable<AutoCompleteOptions[]> {
    return this.publicationsService.getAutocompleteOptions(value).pipe(
      map(data => data.map(item => ({
        bbgCode: item.bbgCode,
        mdsCode: item.mdsCode,
        cinergyCode: item.cinergyCode
      }))),
      catchError(() => of([]))
    );
  }

  addChip(option: AutoCompleteOptions): void {
    if (!this.otherBenchmarkChips.includes(option.bbgCode)) {
      this.otherBenchmarkChips.push(option.bbgCode); // Only add bbgCode
    }
    this.otherBenchmarkControl.setValue(''); // Clear the input after selection
  }

  removeChip(chip: string): void {
    const index = this.otherBenchmarkChips.indexOf(chip);
    if (index >= 0) {
      this.otherBenchmarkChips.splice(index, 1);
    }
  }
}

interface AutoCompleteOptions {
  bbgCode: string;
  mdsCode?: string;
  cinergyCode?: string;
}
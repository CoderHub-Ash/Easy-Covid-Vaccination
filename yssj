<div class="input-button-form">
  <mat-form-field class="full-width" appearance="outline">
    <mat-label>Other Benchmark/s BBG Code</mat-label>
    <mat-chip-list #chipList>
      <!-- Render chips dynamically -->
      <mat-chip 
        *ngFor="let chip of otherBenchmarkChips" 
        [removable]="true" 
        (removed)="removeChip(chip)">
        {{ chip }}
        <mat-icon matChipRemove>cancel</mat-icon>
      </mat-chip>

      <!-- Input field for new chips -->
      <input
        placeholder="+ Other Benchmark BBG Code"
        [formControl]="otherBenchmarkControl"
        [matChipInputFor]="chipList"
        [matChipInputSeparatorKeyCodes]="separatorKeyCodes"
        [matChipInputAddOnBlur]="true"
        (matChipInputTokenEnd)="addChip($event)"
      />
    </mat-chip-list>
  </mat-form-field>
</div>




import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';

@Component({
  selector: 'app-other-benchmark',
  templateUrl: './other-benchmark.component.html',
  styleUrls: ['./other-benchmark.component.scss'],
})
export class OtherBenchmarkComponent {
  otherBenchmarkControl = new FormControl('');
  separatorKeyCodes = [ENTER, COMMA]; // Separator keycodes for chip input
  otherBenchmarkChips: string[] = ['SPGLEP Index', 'SPGLGUP Index']; // Predefined chips

  // Mock data for aggregationIndexList (replace with your actual data)
  publication = {
    aggregationIndexList: [
      { aggregationTicker: 'AGGR_1234', isCoreBenchmark: false },
      { aggregationTicker: 'AGGR_5678', isCoreBenchmark: true },
    ],
  };

  // Add a chip
  addChip(event: any): void {
    const value = (event.value || '').trim();
    if (value) {
      this.otherBenchmarkChips.push(value);
    }
    // Clear the input
    if (event.input) {
      event.input.value = '';
    }
    this.otherBenchmarkControl.setValue('');
  }

  // Remove a chip
  removeChip(chip: string): void {
    if (chip.startsWith('AGGR_')) {
      const index = this.publication.aggregationIndexList.findIndex(
        (x) => x.aggregationTicker === chip && !x.isCoreBenchmark
      );
      if (index > -1) {
        this.publication.aggregationIndexList.splice(index, 1);
      }
    }

    const chipIndex = this.otherBenchmarkChips.indexOf(chip);
    if (chipIndex > -1) {
      this.otherBenchmarkChips.splice(chipIndex, 1);
    }
  }
}



.full-width {
  width: 100%;
}

mat-form-field {
  margin: 16px 0;
}

mat-chip {
  background-color: #e0f7fa;
  color: #00796b;
  margin-right: 8px;

  .mat-icon {
    color: #004d40;
  }

  &:hover {
    background-color: #b2ebf2;
  }
}

input {
  outline: none;
  border: none;
  padding: 8px 0;
}




mat-chip-list {
  height: auto;

  .mat-chip-list-wrapper {
    border-bottom: 2px solid transparent; // Default border
    transition: border-color 0.2s ease-in-out;
  }

  &.mat-focused .mat-chip-list-wrapper {
    border-bottom: 2px solid $bnp-green !important; // Match the focus style
  }

  input {
    outline: none;
    border: none;
    box-shadow: none;
    padding: 4px 0;
    font-size: 14px;
    width: 100%;
  }

  mat-chip {
    margin: 4px;
    background-color: #e0e0e0;
    color: #424242;

    .mat-icon {
      color: #757575;
    }

    &:hover {
      background-color: lighten(#e0e0e0, 10%);
    }
  }
}
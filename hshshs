<div class="form-group">
  <label for="txtOB">Other Benchmark/s BBG Code</label>
  <tag-input
    id="txtOB"
    name="txtOB"
    [(ngModel)]="publication.otherBenchmark"
    (onRemove)="onOtherBenchmarkTagRemoved($event)"
    [class]="validation.isvalidOB == false ? 'form-control BBGvalidation' : 'form-control'"
    [theme]="'bnptheme'"
    [placeholder]="'Other Benchmark BBG Code'"
    [secondaryPlaceholder]="'Enter BBG Code...'"
    [separatorKeyCodes]="[9, 13, 186, 188, 189, 190, 17]"
    [autocompleteItems]="filteredOptions"
    (inputTextChange)="onInputTextChanged($event)"
    (onAutocompleteSelect)="onSelectOption($event)">
  </tag-input>
</div>



import { Component } from '@angular/core';
import { Observable, of } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';

export interface AutoCompleteOptions {
  bbgCode: string;
  mdsCode: string;
  cinergyCode: string;
}

@Component({
  selector: 'app-edit',
  templateUrl: './edit.component.html',
  styleUrls: ['./edit.component.scss']
})
export class EditComponent {
  publication = {
    otherBenchmark: []
  };
  filteredOptions: string[] = [];
  
  private fetchOptions(search: string): Observable<AutoCompleteOptions[]> {
    // Mock data for demonstration
    const mockData: AutoCompleteOptions[] = [
      { bbgCode: 'BNPI001', mdsCode: 'MDS001', cinergyCode: 'CIN001' },
      { bbgCode: 'BNPI002', mdsCode: 'MDS002', cinergyCode: 'CIN002' },
      { bbgCode: 'BNPI003', mdsCode: 'MDS003', cinergyCode: 'CIN003' },
    ];
    return of(mockData.filter(option => option.bbgCode.includes(search)));
  }

  onInputTextChanged(search: string): void {
    if (search.length >= 3) {
      this.fetchOptions(search)
        .pipe(debounceTime(300))
        .subscribe(options => {
          // Populate filteredOptions with the list of BBG Codes
          this.filteredOptions = options.map(option => option.bbgCode);
        });
    } else {
      this.filteredOptions = [];
    }
  }

  onSelectOption(selectedBbgCode: string): void {
    if (!this.publication.otherBenchmark.includes(selectedBbgCode)) {
      this.publication.otherBenchmark.push(selectedBbgCode);
    }
  }

  onOtherBenchmarkTagRemoved(tag: string): void {
    const index = this.publication.otherBenchmark.indexOf(tag);
    if (index > -1) {
      this.publication.otherBenchmark.splice(index, 1);
    }
  }
}

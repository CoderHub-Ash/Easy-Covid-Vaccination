fetchOptions(value: string): Observable<AutoCompletedOptions[]> {
    return this.publicationsService.getAutoCompletedOptions(value).pipe(
        map(data => {
            const options = data.map(item => ({
                bbgCode: item.bbgCode,
                md5Code: item.md5Code,
                cinergyCode: item.cinergyCode
            }));

            // If no results, return a special "Invalid BBG Code" entry
            return options.length > 0 ? options : [{ 
                bbgCode: '❌ Invalid BBG Code', 
                md5Code: '', 
                cinergyCode: '' 
            }];
        }),
        catchError(() => of([{ 
            bbgCode: '❌ Invalid BBG Code', 
            md5Code: '', 
            cinergyCode: '' 
        }])) // Handles API errors gracefully
    );
}

<mat-option *ngFor="let option of filteredCoreOptions | async" 
            [value]="option" 
            [disabled]="option.bbgCode === '❌ Invalid BBG Code'">
  {{ option.bbgCode }} | {{ option.md5Code }} | {{ option.cinergyCode || '-' }}
</mat-option>


<mat-option *ngFor="let option of filteredCoreOptions | async" 
            [value]="option" 
            [disabled]="option.bbgCode === '❌ Invalid BBG Code'">
  {{ option.bbgCode }} 
  <ng-container *ngIf="option.bbgCode !== '❌ Invalid BBG Code'">
    | {{ option.md5Code }} | {{ option.cinergyCode || '-' }}
  </ng-container>
</mat-option>

onInput(value: string, index: number) {
  if (value && value.length >= 3) {
    this.publicationsService.getAutocompleteOptions(value).subscribe({
      next: (options) => {
        this.filteredOptions[index] = options.map((item) => ({
          bbgCode: item.bbgCode,
          mdsCode: item.mdsCode,
          cinergyCode: item.cinergyCode,
          displayName: `${item.bbgCode} (${item.mdsCode}, ${item.cinergyCode})`
        }));
      },
      error: () => {
        this.filteredOptions[index] = [];
      }
    });
  } else {
    this.filteredOptions[index] = [];
  }
}


onSelect(option: any, index: number): void {
  this.aggregationIndex.aggregationFormula[index].ticker = option.bbgCode;
  this.aggregationIndex.aggregationFormula[index].mdsCode = option.mdsCode;
  this.aggregationIndex.aggregationFormula[index].cinergyCode = option.cinergyCode;
}

addTicker() {
  const emptyFormula: AggregationFormula = { ticker: null, mdsCode: null, cinergyCode: null, percentage: null };
  this.aggregationIndex.aggregationFormula.push(emptyFormula);

  // Initialize filteredOptions for the new ticker
  this.filteredOptions[this.aggregationIndex.aggregationFormula.length - 1] = [];
}

this.hasUnfilledTickers = this.aggregationIndex.aggregationFormula.some(
  (formula) =>
    !formula.ticker || formula.ticker.trim() === '' ||
    !formula.mdsCode || formula.mdsCode.trim() === '' ||
    !formula.cinergyCode || formula.cinergyCode.trim() === ''
);






<div class="tickerPercentageForm row align-items-center">
  <!-- BBG Code Input with Autocomplete -->
  <input
    class="form-control col-4"
    placeholder="BBG Code"
    id="ticker-{{ this.type }}-{{ i }}"
    name="ticker"
    [(ngModel)]="this.aggregationIndex.aggregationFormula[i].ticker"
    [matAutocomplete]="auto-{{ i }}"
    (input)="onInput($event.target.value, i)"
    required
  />
  <mat-autocomplete #auto-{{ i }}="matAutocomplete" (optionSelected)="onSelect($event.option.value, i)">
    <mat-option *ngFor="let option of filteredOptions[i]" [value]="option">
      {{ option.displayName }}
    </mat-option>
  </mat-autocomplete>

  <!-- MDS Code -->
  <input
    class="form-control col-3"
    placeholder="MDS Code"
    id="mdsCode-{{ this.type }}-{{ i }}"
    name="mdsCode"
    [(ngModel)]="this.aggregationIndex.aggregationFormula[i].mdsCode"
    readonly
    required
  />

  <!-- Cinergy Code -->
  <input
    class="form-control col-3"
    placeholder="Cinergy Code"
    id="cinergyCode-{{ this.type }}-{{ i }}"
    name="cinergyCode"
    [(ngModel)]="this.aggregationIndex.aggregationFormula[i].cinergyCode"
    readonly
    required
  />

  <!-- Percentage Input -->
  <input
    class="form-control col-2 mx-1"
    placeholder="1-99"
    id="tickerPercentage-{{ this.type }}-{{ i }}"
    name="tickerPercentage"
    type="number"
    min="1"
    max="99"
    [(ngModel)]="this.aggregationIndex.aggregationFormula[i].percentage"
    required
  />

  <!-- Percentage Icon -->
  <i class="fa fa-percentage col-auto"></i>

  <!-- Remove Ticker Icon -->
  <i
    id="removeTicker-{{ this.type }}-{{ i }}"
    *ngIf="i >= 2 || i == 3"
    class="fa fa-minus clickable col-auto mx-1"
    (click)="removeTicker(i)"
  ></i>
</div>




[HttpPost]
[Route("validateaggregationindex")]
public async Task<IActionResult> ValidateAggregationIndex(AggregationIndexModel aggregationIndex)
{
    var callerIp = _httpContextAccessor.HttpContext.Connection.RemoteIpAddress.ToString();
    var currentMethod = MethodBase.GetCurrentMethod().Name;

    // Check QIS
    var tickers = aggregationIndex.aggregationFormula.Select(a => a.ticker);
    var validatedTickers = new List<ProductCharacteristicsDTO>();
    var tickerToValidate = tickers.ToList();

    if (validatedTickers.Count != tickers.Count())
    {
        // Validate tickers and fetch data
        var codeCurrencyMappingList = serviceAggregator.QuotationGenericService.GetCodeCurrencyMapping(tickerToValidate).ToList();
        ValidateBenchmarksOnQuotationDB(tickerToValidate, codeCurrencyMappingList, validatedTickers);

        if (validatedTickers.Count != tickers.Count())
        {
            string errorMessage = string.Join(",", tickerToValidate.Select(t => $"'{t}'")) + ": Ticker(s) not available on MCEStudioDB/QuotationDB";
            _applicationLogger.Log(LogTypeEnums.ERROR.ToString(), currentMethod, errorMessage, null, callerIp);
            return BadRequest(errorMessage);
        }
    }

    // Generate Aggregation Codes
    aggregationIndex.aggregationTicker = "AGGR";
    aggregationIndex.aggregationMdsCode = "AGGR_MDS";
    aggregationIndex.aggregationCinergyCode = "AGGR_CIN";

    aggregationIndex.aggregationFormula
        .OrderBy(a => a.ticker)
        .ToList()
        .ForEach(element =>
        {
            // Generate aggregationTicker
            var tickerCode = element.ticker?.Split(" ")[0] ?? "NULL";
            var tickerCodeSlice = tickerCode.Length > 4 ? tickerCode.Substring(tickerCode.Length - 4) : tickerCode;
            aggregationIndex.aggregationTicker += $"{tickerCodeSlice}{element.percentage}_";

            // Generate aggregationMdsCode
            var mdsCode = element.mdsCode ?? "NULL";
            var mdsCodeSlice = mdsCode.Length > 4 ? mdsCode.Substring(mdsCode.Length - 4) : mdsCode;
            aggregationIndex.aggregationMdsCode += $"{mdsCodeSlice}{element.percentage}_";

            // Generate aggregationCinergyCode
            var cinergyCode = element.cinergyCode ?? "NULL";
            var cinergyCodeSlice = cinergyCode.Length > 4 ? cinergyCode.Substring(cinergyCode.Length - 4) : cinergyCode;
            aggregationIndex.aggregationCinergyCode += $"{cinergyCodeSlice}{element.percentage}_";
        });

    // Trim trailing underscores and convert to uppercase
    aggregationIndex.aggregationTicker = aggregationIndex.aggregationTicker.TrimEnd('_').ToUpper();
    aggregationIndex.aggregationMdsCode = aggregationIndex.aggregationMdsCode.TrimEnd('_').ToUpper();
    aggregationIndex.aggregationCinergyCode = aggregationIndex.aggregationCinergyCode.TrimEnd('_').ToUpper();

    return Ok(aggregationIndex);
}

